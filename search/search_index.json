{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Getting Started Aframe is an HTML-based framework that can be used to create WebXR applications through simple HTML scripting. Because it uses HTML as its interface, every command can be accessed by simply inserting its html tag. Let's start with a basic html structure and insert <head> and <body> tag. < html > < head > </ head > < body > </ body > </ html > To access Aframe, we need to link it through <script> tag inside the <head> . < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > </ body > </ html > Adding Geometries Inside the <body> tag, we should add <a-scene> tag. It is required to define the area where we create an Aframe scene. Note that the Aframe tag is similar to regular html tag, but it is preceded with \"a\" . Next, we can start by inserting several objects. Let\u2019s start by adding primitive geometries into the scene. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box ></ a-box > </ a-scene > </ body > </ html > In the example above, I added a primitive box inside the scene. When we try to run the page in the browser, we might not be able to see anything. First, we have not defined the color so the object looks white like the background. Second, the object is not directly visible to the camera. We have to rotate the camera to be able to see the primitive box. Next, let\u2019s add color and change the position of the box. I will add position and color as an attribute of <a-box> tag. The position follows the coordinates of x y z . I will set the z coordinate -5 from the default position. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" ></ a-box > </ a-scene > </ body > </ html > Now if we refresh the page, we would be able to see a red box. Notice that by changing the z coordinate, we move the box backward (hence the negative value) from the default camera position. There are several other primitive geometries that you can insert into Aframe. You can check the list and their attributes in the documentation page. Play around with primitives and their attributes to get the hang of creating objects with Aframe! Aframe Check out the full documentation on Aframe in the link below. A-frame 1.3.0 Documentation Check the left bar (if you open the page on a desktop), then scroll down to PRIMITIVES section. Pay attention that different primitive geometries have their own attributes. List of PRIMITIVES geometries: <a-box> <a-circle> <a-cylinder> <a-octahedron> <a-plane> <a-ring> <a-sphere> <a-tetrahedron> <a-torus-knot> <a-torus> <a-triangle>","title":"Getting Started"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#getting-started","text":"Aframe is an HTML-based framework that can be used to create WebXR applications through simple HTML scripting. Because it uses HTML as its interface, every command can be accessed by simply inserting its html tag. Let's start with a basic html structure and insert <head> and <body> tag. < html > < head > </ head > < body > </ body > </ html > To access Aframe, we need to link it through <script> tag inside the <head> . < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > </ body > </ html >","title":"Getting Started"},{"location":"#adding-geometries","text":"Inside the <body> tag, we should add <a-scene> tag. It is required to define the area where we create an Aframe scene. Note that the Aframe tag is similar to regular html tag, but it is preceded with \"a\" . Next, we can start by inserting several objects. Let\u2019s start by adding primitive geometries into the scene. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box ></ a-box > </ a-scene > </ body > </ html > In the example above, I added a primitive box inside the scene. When we try to run the page in the browser, we might not be able to see anything. First, we have not defined the color so the object looks white like the background. Second, the object is not directly visible to the camera. We have to rotate the camera to be able to see the primitive box. Next, let\u2019s add color and change the position of the box. I will add position and color as an attribute of <a-box> tag. The position follows the coordinates of x y z . I will set the z coordinate -5 from the default position. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" ></ a-box > </ a-scene > </ body > </ html > Now if we refresh the page, we would be able to see a red box. Notice that by changing the z coordinate, we move the box backward (hence the negative value) from the default camera position. There are several other primitive geometries that you can insert into Aframe. You can check the list and their attributes in the documentation page. Play around with primitives and their attributes to get the hang of creating objects with Aframe! Aframe Check out the full documentation on Aframe in the link below. A-frame 1.3.0 Documentation Check the left bar (if you open the page on a desktop), then scroll down to PRIMITIVES section. Pay attention that different primitive geometries have their own attributes. List of PRIMITIVES geometries: <a-box> <a-circle> <a-cylinder> <a-octahedron> <a-plane> <a-ring> <a-sphere> <a-tetrahedron> <a-torus-knot> <a-torus> <a-triangle>","title":"Adding Geometries"},{"location":"definition/","text":"XR, VR, AR, and MR Defining Virtual Reality There are many ways to define virtual reality. I broadly categorize the definitions into two definitions. The first definition refers to computer-generated digital environment that can be experienced and interacted with as if that environment were real . This definition is broad as it encompasses any environment that is digitally simulated by any devices as virtual reality. It includes smartphone, tablet, desktop PC, and various gaming consoles. As long as the devices are capable to provide interactions and experiences that deceive the mind to perceive as it were real, then the digitally simulated reality inside the device is a virtual reality. The second definition is more strict and particularly related with the emerging virtual reality (VR) headsets technology. The second definition defines virtual reality as cutting edge sensory immersive technologies which use head-mounted displays and an elaborate array of body sensors in order to enhance, elaborate, and expand our sensory interaction with new media objects . Head-mounted displays are highlighted as it offers the capabilities to block our view to the surrounding environment, hence we believe that we have been transported to another reality. The availability of various kinds of sensors allows the head-mounted display to synchronize our movement inside the digitally simulated reality. Thus, we seamlessly fooled as if we were moving inside the virtual reality. Among these two definitions, many discussions tend to associate virtual reality with the digitally simulated reality inside the VR headsets. The reason is because VR headsets provide higher immersion degree that is capable to transport our presence to another reality. As our peripheral vision is blocked, our visual sensory is fixated into the display inside the VR headsets. We also have to distinguish virtual reality (VR) from augmented reality (AR). The main difference is the degree of virtuality. By referring to the Reality-Virtuality (RV) Continuum by Milgram and Kishino, VR contains set of virtualized environments. Users are immersed inside digitally generated environment inside the VR. On the other side of the spectrum is the AR. Users mostly see real world objects and environments. Virtual objects are projected on top of the real world. In between the virtual and augmented reality is the mixed reality (MR). Using special headset, virtual environments and objects are visible as user interacts in the real world. Virtuality Continuum (VC) adapted from Milgram and F. Kishino, \"A taxonomy of mixed reality visual displays,\" IEICE Transactions on Information and Systems, Vols. E77-D, no. 12, pp. 1321-1329, 1994. Virtual reality was mentioned as Augmented Virtuality (AV) Burdea and Coiffet (2003) explained that VR has three properties: Interactivity, where users interact with the object on the screen in real-time, allows them to modify the virtual world instantaneously. Immersion as modification of the virtual world involves sensorial modalities that make the experience captivating. Hence, users immerse themselves in the virtual world. Imagination, which is related to our mind's capacity to perceive the simulated realities inside the virtual world as existing. Degree of Immersion Immersion in VR involves various sensorial modalities: visual, acoustics, haptics, and motion. Multiple devices offer multitude of sensory feedback. It results in various immersion degree, ranges from low to high immersion. In visual category, monitor display are in the low immersion spectrum. While users can interact with the virtual objects and environments through the monitor, user's periphery still capture real world objects that makes the experience less immersive. Head mounted device (HMD) that blocks the periphery of the visual senses enable higher immersion by isolating the vision from its surrounding environments. At the highest end of the immersion is CAVE and Powerwall. Instead of using wearable devices to see the VR, virtual environments and objects are projected onto the real world. The externalization of virtual environments offers natural interaction on a 1-to-1 human scale. Wearable devices may be needed to enable the sense of depth from the projected stereoscopic images. The degree of Immersion redrawn from Carrozzino and M. Bergamasco, \"Beyond virtual museums: Experiencing immersive virtual reality in real museums,\" Journal of Cultural Heritage, vol. 11, no. 4, pp. 452-458, 2010. References C. Burdea and P. Coiffet, Virtual Reality Technology, 2nd Edition, Wiley-IEEE Press, 2003.","title":"Definition"},{"location":"definition/#xr-vr-ar-and-mr","text":"","title":"XR, VR, AR, and MR"},{"location":"definition/#defining-virtual-reality","text":"There are many ways to define virtual reality. I broadly categorize the definitions into two definitions. The first definition refers to computer-generated digital environment that can be experienced and interacted with as if that environment were real . This definition is broad as it encompasses any environment that is digitally simulated by any devices as virtual reality. It includes smartphone, tablet, desktop PC, and various gaming consoles. As long as the devices are capable to provide interactions and experiences that deceive the mind to perceive as it were real, then the digitally simulated reality inside the device is a virtual reality. The second definition is more strict and particularly related with the emerging virtual reality (VR) headsets technology. The second definition defines virtual reality as cutting edge sensory immersive technologies which use head-mounted displays and an elaborate array of body sensors in order to enhance, elaborate, and expand our sensory interaction with new media objects . Head-mounted displays are highlighted as it offers the capabilities to block our view to the surrounding environment, hence we believe that we have been transported to another reality. The availability of various kinds of sensors allows the head-mounted display to synchronize our movement inside the digitally simulated reality. Thus, we seamlessly fooled as if we were moving inside the virtual reality. Among these two definitions, many discussions tend to associate virtual reality with the digitally simulated reality inside the VR headsets. The reason is because VR headsets provide higher immersion degree that is capable to transport our presence to another reality. As our peripheral vision is blocked, our visual sensory is fixated into the display inside the VR headsets. We also have to distinguish virtual reality (VR) from augmented reality (AR). The main difference is the degree of virtuality. By referring to the Reality-Virtuality (RV) Continuum by Milgram and Kishino, VR contains set of virtualized environments. Users are immersed inside digitally generated environment inside the VR. On the other side of the spectrum is the AR. Users mostly see real world objects and environments. Virtual objects are projected on top of the real world. In between the virtual and augmented reality is the mixed reality (MR). Using special headset, virtual environments and objects are visible as user interacts in the real world. Virtuality Continuum (VC) adapted from Milgram and F. Kishino, \"A taxonomy of mixed reality visual displays,\" IEICE Transactions on Information and Systems, Vols. E77-D, no. 12, pp. 1321-1329, 1994. Virtual reality was mentioned as Augmented Virtuality (AV) Burdea and Coiffet (2003) explained that VR has three properties: Interactivity, where users interact with the object on the screen in real-time, allows them to modify the virtual world instantaneously. Immersion as modification of the virtual world involves sensorial modalities that make the experience captivating. Hence, users immerse themselves in the virtual world. Imagination, which is related to our mind's capacity to perceive the simulated realities inside the virtual world as existing.","title":"Defining Virtual Reality"},{"location":"definition/#degree-of-immersion","text":"Immersion in VR involves various sensorial modalities: visual, acoustics, haptics, and motion. Multiple devices offer multitude of sensory feedback. It results in various immersion degree, ranges from low to high immersion. In visual category, monitor display are in the low immersion spectrum. While users can interact with the virtual objects and environments through the monitor, user's periphery still capture real world objects that makes the experience less immersive. Head mounted device (HMD) that blocks the periphery of the visual senses enable higher immersion by isolating the vision from its surrounding environments. At the highest end of the immersion is CAVE and Powerwall. Instead of using wearable devices to see the VR, virtual environments and objects are projected onto the real world. The externalization of virtual environments offers natural interaction on a 1-to-1 human scale. Wearable devices may be needed to enable the sense of depth from the projected stereoscopic images. The degree of Immersion redrawn from Carrozzino and M. Bergamasco, \"Beyond virtual museums: Experiencing immersive virtual reality in real museums,\" Journal of Cultural Heritage, vol. 11, no. 4, pp. 452-458, 2010.","title":"Degree of Immersion"},{"location":"definition/#references","text":"C. Burdea and P. Coiffet, Virtual Reality Technology, 2nd Edition, Wiley-IEEE Press, 2003.","title":"References"},{"location":"interaction/","text":"Interaction Event Set You can add interaction to Aframe with an event-set component. This component is an additional script, which has to be linked in the <head> tag. Let\u2019s start by adding the event-set script inside the <head> tag. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" ></ a-box > </ a-scene > </ body > </ html > To create interactive object with event-set , we have to add event-set as an attribute inside an entity or a component. The general structure of event-set follows this convention: <a-entity event-set__${id}=\"_event: ${eventName}; ${someProperty}: ${toValue}\"> For instance, we can use event-set to tell Aframe to change the box color into green upon hovering the mouse cursor. Hence, if we would like to add an interaction to our box that change its color upon mouse hovering, the code would look like this: < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" event-set__color = \"_event: mouseenter; color: green\" ></ a-box > </ a-scene > </ body > </ html > Notice that the interaction is triggered by the event parameter inside event-set attribute. It is also important to know that event-set must have unique identifier. In this case, we name the attribute as event-set__color . The word color that comes after event-set__ could be anything. Just make sure that this id is unique to the event-set attribute for the whole document. Adding Cursor After adding the event-set attribute, we also need to add cursor into the <a-scene> to allow Aframe to create \"camera cursor\" that will be able to interact with the object. So, the complete script would be as follow: < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" event-set__color = \"_event: mouseenter; color: green\" ></ a-box > < a-camera > < a-cursor ></ a-cursor > </ a-camera > </ a-scene > </ body > </ html > There are several command that we can use to trigger _event . The lists are described in the table below: _event Description click trigger the event when the object is clicked mouseenter trigger the event when the camera cursor hover over the object mouseleave trigger the event when the camera cursor leave the object mousedown trigger the event when the camera cursor hover over the object and the mouse button was pressed mouseup trigger the event when the camera cursor hover over the object and the mouse button was released fusing trigger the event when the camera cursor hover over the object after the countdown ends Sample Check out the sample project in the following link: Simple Interaction","title":"Interaction"},{"location":"interaction/#interaction","text":"","title":"Interaction"},{"location":"interaction/#event-set","text":"You can add interaction to Aframe with an event-set component. This component is an additional script, which has to be linked in the <head> tag. Let\u2019s start by adding the event-set script inside the <head> tag. < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" ></ a-box > </ a-scene > </ body > </ html > To create interactive object with event-set , we have to add event-set as an attribute inside an entity or a component. The general structure of event-set follows this convention: <a-entity event-set__${id}=\"_event: ${eventName}; ${someProperty}: ${toValue}\"> For instance, we can use event-set to tell Aframe to change the box color into green upon hovering the mouse cursor. Hence, if we would like to add an interaction to our box that change its color upon mouse hovering, the code would look like this: < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" event-set__color = \"_event: mouseenter; color: green\" ></ a-box > </ a-scene > </ body > </ html > Notice that the interaction is triggered by the event parameter inside event-set attribute. It is also important to know that event-set must have unique identifier. In this case, we name the attribute as event-set__color . The word color that comes after event-set__ could be anything. Just make sure that this id is unique to the event-set attribute for the whole document.","title":"Event Set"},{"location":"interaction/#adding-cursor","text":"After adding the event-set attribute, we also need to add cursor into the <a-scene> to allow Aframe to create \"camera cursor\" that will be able to interact with the object. So, the complete script would be as follow: < html > < head > < script src = \"https://aframe.io/releases/1.3.0/aframe.min.js\" ></ script > < script src = \"https://unpkg.com/aframe-event-set-component@3.0.3/dist/aframe-event-set-component.min.js\" ></ script > </ head > < body > < a-scene > < a-box position = \"0 0 -5\" color = \"red\" event-set__color = \"_event: mouseenter; color: green\" ></ a-box > < a-camera > < a-cursor ></ a-cursor > </ a-camera > </ a-scene > </ body > </ html > There are several command that we can use to trigger _event . The lists are described in the table below: _event Description click trigger the event when the object is clicked mouseenter trigger the event when the camera cursor hover over the object mouseleave trigger the event when the camera cursor leave the object mousedown trigger the event when the camera cursor hover over the object and the mouse button was pressed mouseup trigger the event when the camera cursor hover over the object and the mouse button was released fusing trigger the event when the camera cursor hover over the object after the countdown ends Sample Check out the sample project in the following link: Simple Interaction","title":"Adding Cursor"}]}